package com.tbyf.controller.app.appjmxx;

import com.tbyf.controller.base.*;
import com.tbyf.entity.enums.EnumAttachmentType;
import com.tbyf.util.*;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.tbyf.service.gp.jmxx.JmxxManager;
import com.tbyf.service.gp.mobilecode.impl.MobileCodeService;
import com.tbyf.service.system.attachment.AttachmentManager;

import javax.annotation.*;

import java.text.SimpleDateFormat;
import java.util.*;

/**
 * APP 居民信息
 * 
 * 相关参数协议：
 * 00	请求失败
 * 01	请求成功
 * 02	返回空值
 * 03	请求协议参数不完整    
 * 04  用户名或密码错误
 * 05  FKEY验证失败
*/
@Controller
@RequestMapping(value="/appjmxx")
public class AppjmxxController extends BaseController {
    
	@Resource(name="jmxxService")
	private JmxxManager jmxxService;
	
	@Resource(name="mobileCodeService")
	private MobileCodeService mobileCodeService;
	
	@Value("${system.photo.realDir}")
	String attachmentRealDir;
	@Value("${tomcat.photo.virtualDir}")
	String attachmentVirtualDir;
	
	@Resource(name="attachmentService")
	private AttachmentManager attachmentService;
	//上传文件类型
	private Integer JMTX= EnumAttachmentType.JMTX.getCode();
	private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
	/**
	 * 居民用户注册接口
	 * @return
	 */
	@RequestMapping(value = "/saveObj", method = RequestMethod.POST)
	@ResponseBody
	public Object saveObj()
	{
        logBefore(logger, "app居民注册接口");
        Map<String,Object> map = new HashMap<String,Object>();
        PageData pd = new PageData();
        pd = this.getPageData();
        String result = "00";
        String message="";
        try{	
        	if(Tools.checkKey("TELEPHONE", pd.getString("FKEY"))){	//检验请求key值是否合法
	        	if(AppUtil.checkParam("savejmxx", pd)){	//检查参数
	        		if(null ==jmxxService.findByTel(pd)){ //验证手机号是否存在
	        			//验证码校验
	        			pd.put("SYSTIME", sdf.format(new Date()));
	        			//查询300秒内最新的验证码
	        			PageData obj =mobileCodeService.findMobileCodeBy300Time(pd);
	        			if(obj!=null && obj.get("CODE").equals(pd.get("YZM"))){
	        				pd.put("PASSWORD",MD5.md5(pd.getString("PASSWORD")));
		        			pd.put("STATE",0);
		        			pd.put("IS_SIGN", 0);
		        			jmxxService.saveForApp(pd);
		        			result = "01";
		 		        	message =ResultMessageUtil.MESSAGE_1;
	        			}else{
	        				result = "06";
		        			message ="验证码错误，或已失效";
	        			}
	        		}else{
	        			result = "04";
	        			message ="手机号码已注册";
	        		}
	        	}else{
	        		result = "03";
	        		message =ResultMessageUtil.MESSAGE_3;
	        	}  
        	}else{
				result = "05";
				message =ResultMessageUtil.MESSAGE_5;
			} 	
        }catch (Exception e){
        	message =ResultMessageUtil.MESSAGE_0;
            logger.error(e.toString(), e);
        }finally{
            map.put("result", result);
            map.put("message", message);
            logAfter(logger);
        }
        return AppUtil.returnObject(new PageData(), map);
    }
	/**
	 * 居民用户注册接口
	 * @return
	 */
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	@ResponseBody
	public Object login()
	{
        logBefore(logger, "app居民登陆接口");
        Map<String,Object> map = new HashMap<String,Object>();
        PageData pd = new PageData();
        pd = this.getPageData();
        String result = "00";
        String message="";
        try{	
        	if(Tools.checkKey("TELEPHONE", pd.getString("FKEY"))){	//检验请求key值是否合法
	        	if(AppUtil.checkParam("loginjmxx", pd)){	//检查参数
	        		if(null !=jmxxService.findByTel(pd)){ //验证手机号是否存在
	        			//验证码校验
//	        			pd.put("SYSTIME", sdf.format(new Date()));
//	        			PageData obj =mobileCodeService.findMobileCodeBy300Time(pd);
//	        			if(obj!=null && obj.get("CODE").equals(pd.get("YZM"))){
	        				String PASSWORD = pd.getString("PASSWORD");
	        				pd.put("PASSWORD", MD5.md5(PASSWORD));
	        				PageData userobj = jmxxService.findByLoginInfo(pd);
	        				if(null !=userobj){ //判断手机
	        					map.put("pd", userobj);
	        					result = "01";
			 		        	message =ResultMessageUtil.MESSAGE_1;
	        				}else{
			        			result = "04";
			        			message ="用户名密码错误";
			        		}
//	        			}else{
//	        				result = "06";
//		        			message ="验证码错误，或已失效";
//	        			}
		        		
	        		}else{
	        			result = "07";
	        			message ="用户不存在";
	        		}
	        	}else{
	        		result = "03";
	        		message =ResultMessageUtil.MESSAGE_3;
	        	}  
        	}else{
				result = "05";
				message =ResultMessageUtil.MESSAGE_5;
			} 	
        }catch (Exception e){
        	message =ResultMessageUtil.MESSAGE_0;
            logger.error(e.toString(), e);
        }finally{
            map.put("result", result);
            map.put("message", message);
            logAfter(logger);
        }
        return AppUtil.returnObject(new PageData(), map);
    }
	/**
	 * 居民短信快捷登录接口
	 * @return
	 */
	@RequestMapping(value = "/mobileLogin", method = RequestMethod.POST)
	@ResponseBody
	public Object mobileLogin()
	{
        logBefore(logger, "app居民登陆接口");
        Map<String,Object> map = new HashMap<String,Object>();
        PageData pd = new PageData();
        pd = this.getPageData();
        String result = "00";
        String message="";
        try{	
        	if(Tools.checkKey("TELEPHONE", pd.getString("FKEY"))){	//检验请求key值是否合法
	        	if(pd.containsKey("TELEPHONE") && pd.containsKey("YZM")){	//检查参数
	        		if(null !=jmxxService.findByTel(pd)){ //验证手机号是否存在
	        			//验证码校验
	        			pd.put("SYSTIME", sdf.format(new Date()));
	        			PageData obj =mobileCodeService.findMobileCodeBy300Time(pd);
	        			if(obj!=null && obj.get("CODE").equals(pd.get("YZM"))){
	        				PageData userobj = jmxxService.findByLoginInfo(pd);
	        				if(null !=userobj){ //判断用户是否存在
	        					map.put("pd", userobj);
	        					result = "01";
			 		        	message =ResultMessageUtil.MESSAGE_1;
	        				}else{
			        			result = "04";
			        			message ="用户异常";
			        		}
	        			}else{
	        				result = "06";
		        			message ="验证码错误，或已失效";
	        			}
		        		
	        		}else{
	        			result = "07";
	        			message ="用户不存在";
	        		}
	        	}else{
	        		result = "03";
	        		message =ResultMessageUtil.MESSAGE_3;
	        	}  
        	}else{
				result = "05";
				message =ResultMessageUtil.MESSAGE_5;
			} 	
        }catch (Exception e){
        	message =ResultMessageUtil.MESSAGE_0;
            logger.error(e.toString(), e);
        }finally{
            map.put("result", result);
            map.put("message", message);
            logAfter(logger);
        }
        return AppUtil.returnObject(new PageData(), map);
    }
	
	
 	@RequestMapping(value="/editPW",method=RequestMethod.POST)
    @ResponseBody
    public Object editPW()
    {
        logBefore(logger, "app居民密码修改接口");
        Map<String,Object> map = new HashMap<String,Object>();
        PageData pd = new PageData();
        pd = this.getPageData();
        String result = "00";
        String message="";
        try{	
        	if(Tools.checkKey("PASSWORD", pd.getString("FKEY"))){	//检验请求key值是否合法
	        	if(AppUtil.checkParam("editJmxxPw", pd)){//检验参数
	        		PageData user =jmxxService.findById(pd);
        			if(user!=null){
        				if(user.get("PASSWORD").equals(MD5.md5(pd.getString("OLD_PW")))){
			        		if(!pd.getString("NEW_PW").equals(pd.getString("OLD_PW"))){
			        				pd.put("PASSWORD", MD5.md5(pd.getString("NEW_PW")));
			        				jmxxService.editPW(pd);
			        				 result = "01";
			        				 message =ResultMessageUtil.MESSAGE_1;
			        		}else{
			        			result = "06";
			        			message="新密码不能与旧密码一致";
			        		}
        				}else{
        					result = "04";
    	        			message ="用户密码错误";
        				}
        			}else{
        				result = "02";
	        			message ="用户不存在";
        			}
	        	}else{
	        		result = "03";
	        		message =ResultMessageUtil.MESSAGE_3;
	        	}
        	}else{
				result = "05";
				message =ResultMessageUtil.MESSAGE_5;
			}	
        }catch (Exception e){
			 message =ResultMessageUtil.MESSAGE_0;
            logger.error(e.toString(), e);
        }finally{
            map.put("result", result);
            map.put("message", message);
            logAfter(logger);
        }
        return AppUtil.returnObject(new PageData(), map);
    }
 	/**
 	 * 忘记密码接口
 	 * @return
 	 */
	@RequestMapping(value="/editPhonePW",method=RequestMethod.POST)
    @ResponseBody
    public Object editPhonePW()
    {
        logBefore(logger, "app居民忘记密码修改接口");
        Map<String,Object> map = new HashMap<String,Object>();
        PageData pd = new PageData();
        pd = this.getPageData();
        String result = "00";
        String message="";
        try{	
        	if(Tools.checkKey("PASSWORD", pd.getString("FKEY"))){	//检验请求key值是否合法
	        	if(AppUtil.checkParam("phoneeditJmxxPw", pd)){//检验参数
	        		//验证码校验
	    			pd.put("SYSTIME", DateUtil.getTime());
	    			pd.put("TELEPHONE", pd.get("TELEPHONE"));
	    			PageData obj =mobileCodeService.findMobileCodeBy300Time(pd);
					if(obj!=null && obj.get("CODE").equals(pd.get("MOBILECODE"))){
						String password = pd.getString("PASSWORD");
						pd.put("PASSWORD", "");
		        		PageData user =jmxxService.findByLoginInfo(pd);
	        			if(user!=null){
	        				 pd.put("USER_AGENT_ID", user.get("USER_AGENT_ID"));
	        				 pd.put("PASSWORD", MD5.md5(password));
	        				 jmxxService.editPW(pd);
	        				 result = "01";
	        				 message =ResultMessageUtil.MESSAGE_1;
				        		 
	        			}else{
	        				result = "02";
		        			message ="用户不存在";
	        			}
					}else{
						result = "06";
	        			message ="验证码错误，或已失效";
					}
	        	}else{
	        		result = "03";
	        		message =ResultMessageUtil.MESSAGE_3;
	        	}
        	}else{
				result = "05";
				message =ResultMessageUtil.MESSAGE_5;
			}	
        }catch (Exception e){
			 message =ResultMessageUtil.MESSAGE_0;
            logger.error(e.toString(), e);
        }finally{
            map.put("result", result);
            map.put("message", message);
            logAfter(logger);
        }
        return AppUtil.returnObject(new PageData(), map);
    }
 	
 	@RequestMapping(value="/queryObj",method=RequestMethod.GET)
    @ResponseBody
    public Object queryObj()
    {
        logBefore(logger, "app居民信息查看接口");
        Map<String,Object> map = new HashMap<String,Object>();
        PageData pd = new PageData();
        pd = this.getPageData();
        String result = "00";
        String message="";
        try{	
        	if(Tools.checkKey("TELEPHONE", pd.getString("FKEY"))){	//检验请求key值是否合法
	        	if(null!=pd.getString("USER_AGENT_ID") && !pd.getString("USER_AGENT_ID").equals("")){//检验参数
		        	PageData obj=jmxxService.findUserInfoById(pd);
		        	map.put("pd", obj);
		            result = "01";
	        		message =ResultMessageUtil.MESSAGE_1;
	        	}else{
	        		result = "03";
	        		message =ResultMessageUtil.MESSAGE_3;
	        	}    
        	}else{
				result = "05";
        		message =ResultMessageUtil.MESSAGE_5;
			}	
        }catch (Exception e){
    		message =ResultMessageUtil.MESSAGE_0;
            logger.error(e.toString(), e);
        }finally{
            map.put("result", result);
            map.put("message", message);
            logAfter(logger);
        }
        return AppUtil.returnObject(new PageData(), map);
    }
 	@RequestMapping(value="/editObj",method=RequestMethod.POST)
    @ResponseBody
    public Object editObj()
    {
        logBefore(logger, "app居民信息修改接口");
        Map<String,Object> map = new HashMap<String,Object>();
        PageData pd = this.getPageData();
        String result = "00";
        String message="";
        try{	
        	if(Tools.checkKey("TELEPHONE", pd.getString("FKEY"))){	//检验请求key值是否合法
        		if(AppUtil.checkParam("editJmxx", pd)){//检验参数
        			jmxxService.editForApp(pd);
		            result = "01";
		    		message =ResultMessageUtil.MESSAGE_1;
	        	}else{
	        		result = "03";
	        		message =ResultMessageUtil.MESSAGE_3;
	        	}
        	}else{
				result = "05";
	    		message =ResultMessageUtil.MESSAGE_5;
			}	
        }catch (Exception e){
    		message =ResultMessageUtil.MESSAGE_0;
            logger.error(e.toString(), e);
        }finally{
            map.put("result", result);
            logAfter(logger);
        }
        return AppUtil.returnObject(new PageData(), map);
    }
 	/**
     * app签约管理查询 
     * @param pageSize 页码 ，pageCount 当前页数
     * @param
     * @return
     */
 	@RequestMapping(value="/queryPage",method=RequestMethod.GET)
    @ResponseBody
    public Object queryPage()
    {
        logBefore(logger, "app居民分页查询");
        Map<String,Object> map = new HashMap<String,Object>();
        PageData pd = new PageData();
        pd = this.getPageData();
        String result = "00";
        String message="";
        try{	
        	if(Tools.checkKey("KEYWORDS", pd.getString("FKEY"))){	//检验请求key值是否合法
	    		int pageSize=1;//页码
        		int pageCount=10;//页数
               	if(null !=pd.get("PAGESIZE") && null !=pd.get("PAGECOUNT") ){
               		pd.put("pageStart", (Integer.parseInt(pd.get("PAGESIZE").toString())-1)*Integer.parseInt(pd.get("PAGECOUNT").toString())+1);
               		pd.put("pageEnd", Integer.parseInt(pd.get("PAGESIZE").toString()) * Integer.parseInt(pd.get("PAGECOUNT").toString()));
               	}else{
               		pd.put("pageStart", (pageSize-1)* pageCount+1);
               		pd.put("pageEnd", pageSize * pageCount);
               	}
               	pd.put("STATE", 0);
	    		List<PageData> list = jmxxService.jmxxlistforApp(pd);
	        	map.put("pd", list);
	            result = "01";
	            message =ResultMessageUtil.MESSAGE_1;
        	}else{
        		result = "05";
		        message =ResultMessageUtil.MESSAGE_5;
        	}
        }catch (Exception e){
		    message =ResultMessageUtil.MESSAGE_0;
            logger.error(e.toString(), e);
        }finally{
            map.put("result", result);
            map.put("message", message);
            logAfter(logger);
        }
        return AppUtil.returnObject(new PageData(), map);
    }
 	
 	@RequestMapping(value = "/uploadImage")
	@ResponseBody
	public Object upFile(MultipartHttpServletRequest request,
			@RequestParam(value = "FILE", required = false) MultipartFile file)
			throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		String result ="00";
		String message ="";
		try {
			if(Tools.checkKey("FILE", request.getParameter("FKEY"))){	//检验请求key值是否合法  
				//文件上传路径，保存到服务器项目下。
				if(file.getSize() !=0 ){
					if(!file.isEmpty()){
						String uuid = this.get32UUID();
						String realName = FileUpload.fileUp(file, attachmentRealDir, uuid );
						String attachmentVirtualPath = attachmentVirtualDir + realName;
	
						PageData attachmentPd = new PageData();
						attachmentPd.put("ATTACHMENT_ID", uuid);	//主键
						attachmentPd.put("BUSINESS_ID", "");
						attachmentPd.put("TYPE", JMTX);
						attachmentPd.put("NAME", file.getOriginalFilename());
						attachmentPd.put("PATH", attachmentVirtualPath);
						attachmentPd.put("SIZE", FileSizeFormatUtil.formatFileSize(file.getSize()));
						attachmentPd.put("CONTENTTYPE", file.getContentType());
						attachmentPd.put("OPERATER",request.getParameter("PERSON_ID"));	//上传人
						attachmentPd.put("OPERATEDATE", Tools.date2Str(new Date()));	//上传时间
						attachmentService.save(attachmentPd);
						PageData pd = new PageData();
						pd.put("FILE_ID", uuid);
						pd.put("FILE_URL", attachmentVirtualPath);
						map.put("pd", pd);
						PageData imgPd = new PageData();
						String s=request.getParameter("PERSON_ID");
						int USER_AGENT_ID=Integer.parseInt(s);
						System.out.println("----s---"+s);
						System.out.println("----USER_AGENT_ID---"+USER_AGENT_ID);
						imgPd.put("USER_AGENT_ID", USER_AGENT_ID);
						imgPd.put("IMAGE_ID", uuid);
						imgPd.put("IMAGE_URL", attachmentVirtualPath);
						jmxxService.editJmtx(imgPd);
						result="01";
						message = ResultMessageUtil.MESSAGE_1;
					}else{
						result="00";
						message = ResultMessageUtil.MESSAGE_0;
					}
				} else { 
					result="00";
					message = ResultMessageUtil.MESSAGE_0;
				}
			}else{
				 result = "05";
					message = ResultMessageUtil.MESSAGE_5;
			}
		} catch (Exception e) {
			logger.error(e.toString(), e);
			message = ResultMessageUtil.MESSAGE_0;
		} finally {
			map.put("result", result);
			map.put("message", message);
			logAfter(logger);
		}
		return AppUtil.returnObject(new PageData(), map);
	}
}
	
 