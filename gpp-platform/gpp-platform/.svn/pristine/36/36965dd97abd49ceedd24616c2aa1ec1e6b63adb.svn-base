package com.tbyf.controller.app.appSfjl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.JsonArray;
import com.tbyf.controller.base.BaseController;
import com.tbyf.entity.enums.EnumSfjlSTZZ;
import com.tbyf.entity.enums.EnumSfjlZT;
import com.tbyf.service.gp.sfjl.impl.SfjlService;
import com.tbyf.util.AppUtil;
import com.tbyf.util.PageData;
import com.tbyf.util.ResultMessageUtil;
import com.tbyf.util.Tools;

/**
 * 相关参数协议：
 * 00	请求失败
 * 01	请求成功
 * 02	返回空值
 * 03	请求协议参数不完整    
 * 04  	用户名或密码错误
 * 05  	FKEY验证失败
 */

@Controller
@RequestMapping(value="/appsfgl")
public class IntSfjlController extends BaseController {

	@Resource(name="sfjlService")
	private SfjlService sfjlService;
	
	/**
     * app随访记录查询 
     * @param pageSize 页码 ，pageCount 当前页数，
     * @return
     */
    @RequestMapping(value="/applist", method = RequestMethod.GET)
    @ResponseBody
    public Object getSfjl()
    {
        logBefore(logger, "app通过过滤条件分页查询接口");
        Map<String,Object> map = new HashMap<String,Object>();
        PageData pd = new PageData();
        pd = this.getPageData();
        String result = "00";
        try{	
        	if(Tools.checkKey("KEYWORDS", pd.getString("FKEY"))){	//检验请求key值是否合法
        		//如果不传分页参数，给默认值。
        		int pageSize=1;//页码
        		int pageCount=10;//页数
        		if(null !=pd.get("PAGESIZE") && null !=pd.get("PAGECOUNT") ){
               		pd.put("pageStart", (Integer.parseInt(pd.get("PAGESIZE").toString())-1)*Integer.parseInt(pd.get("PAGECOUNT").toString())+1);
               		pd.put("pageEnd", Integer.parseInt(pd.get("PAGESIZE").toString()) * Integer.parseInt(pd.get("PAGECOUNT").toString()));
               	}else{
               		pd.put("pageStart", (pageSize-1)* pageCount+1);
               		pd.put("pageEnd", pageSize * pageCount);
               	}
               if(AppUtil.checkParam("sfjlQueryPage", pd)){	//检查参数
        		List<PageData> list=sfjlService.queryPage(pd);
	        		 
	        			map.put("pd", list);
	        			result = "01";
                }else {
	               result = "03";
	            }
         	}else{
				result = "05";
			}
        }catch (Exception e){
            logger.error(e.toString(), e);
        }finally{
            map.put("result", result);
            logAfter(logger);
        }
        return AppUtil.returnObject(new PageData(), map);
    }
    
    
    /**
     * app随访记录新增
     * @return
     */
	
    @RequestMapping(value="/appSave", method = RequestMethod.POST)
    @ResponseBody
    public Object appSave(){
        logBefore(logger, "app新增随访记录");
        Map<String,Object> map = new HashMap<String,Object>();
        PageData pd = new PageData();
        pd = this.getPageData();
        String result = "00";
        try{ 
        	if(Tools.checkKey("KEYWORDS", pd.getString("FKEY"))){	//检验请求key值是否合法
	           if(AppUtil.checkParam("appSaveSFJL", pd)){	//检查参数
	        	   pd.put("ID", this.get32UUID());	//
	        	   if(null==pd.getString("STZZ")||"".equals(pd.getString("STZZ"))){ //身体症状为空时默认为无症状
	        		   pd.put("STZZ", EnumSfjlSTZZ.WZZ.getCode());
	        	   }
	        	   sfjlService.save(pd);
	              result = "01";
	           }else {
	              result = "03";
	           }
        	}else{
				result = "05";
			}
        }catch (Exception e){
            logger.error(e.toString(), e);
        }finally{
            map.put("result", result);
            logAfter(logger);
        }
        return AppUtil.returnObject(new PageData(), map);
    }
    
    /**
     * app随访记录修改
     * @return
     */
    @RequestMapping(value="/appEdit", method = RequestMethod.POST)
    @ResponseBody
    public Object appEdit()
    {
        logBefore(logger, "app修改随访记录");
        Map<String,Object> map = new HashMap<String,Object>();
        PageData pd = new PageData();
        pd = this.getPageData();
        String result = "00";
        try{
        	if(Tools.checkKey("KEYWORDS", pd.getString("FKEY"))){	//检验请求key值是否合法
	           if(AppUtil.checkParam("appEditSFJL", pd)){	//检查参数
	        	   sfjlService.edit(pd);			//修改
	              result = "01";
	           }else {
	              result = "03";
	           }
        	}else{
				result = "05";
			}
        }catch (Exception e){
            logger.error(e.toString(), e);
        }finally{
            map.put("result", result);
            logAfter(logger);
        }
        return AppUtil.returnObject(new PageData(), map);
    }
    
    /**
     * app随访记录删除
     * @param id ID 
     * @return
     */
 	@RequestMapping(value="/appDelete", method = RequestMethod.GET)
    @ResponseBody
    public Object appDelete()
    {
        logBefore(logger, "APP删除随访记录");
        Map<String,Object> map = new HashMap<String,Object>();
        PageData pd = new PageData();
        pd = this.getPageData();
        String result = "00";
        try{
        	if(Tools.checkKey("KEYWORDS", pd.getString("FKEY"))){	//检验请求key值是否合法
	        	if(null!=pd.getString("ID") && !pd.getString("ID").equals("")){//检验参数
	        		pd.put("ZT", EnumSfjlZT.DELETE.getCode());
	        		sfjlService.delete(pd);
	        		result = "01";
	        	}else{
	        		result = "03";
	        	}
        	}else{
				result = "05";
			}
        }catch (Exception e){
            logger.error(e.toString(), e);
        }finally{
            map.put("result", result);
            logAfter(logger);
        }
        return AppUtil.returnObject(new PageData(), map);
    }
 	
 	
 	/**
     * app通过ID查看随访记录（查看详情）
     * @param id ID 
     * @return
     */
 	@RequestMapping(value="/appFindByID", method = RequestMethod.GET)
    @ResponseBody
    public Object appFindByID()
    {
        logBefore(logger, "APP查看详情");
        Map<String,Object> map = new HashMap<String,Object>();
        PageData pd = new PageData();
        pd = this.getPageData();
        String result = "00";
        try{
        	if(Tools.checkKey("KEYWORDS", pd.getString("FKEY"))){	//检验请求key值是否合法
	        	if(null!=pd.getString("ID") && !pd.getString("ID").equals("")){//检验参数
	        		PageData sfjl=sfjlService.findById(pd);
	        		if(sfjl.size()==0){
	        			result = "02";
	        		}else{
	        			map.put("pd", sfjl);
	        			result = "01";
	        		}
	        	}else{
	        		result = "03";
	        	}
        	}else{
				result = "05";
			}
        }catch (Exception e){
            logger.error(e.toString(), e);
        }finally{
            map.put("result", result);
            logAfter(logger);
        }
        return AppUtil.returnObject(new PageData(), map);
    }
 	
 	/**
 	 * app随访心电图记录查询详情
 	 * @return
 	 */
 	
 	@RequestMapping(value="/appXdtQuery", method = RequestMethod.GET)
 	@ResponseBody
 	public Object appXdtQuery(){
 		logBefore(logger, "app随访心电图记录查询详情");
 		Map<String,Object> map = new HashMap<String,Object>();
 		PageData pd = new PageData();
 		pd = this.getPageData();
 		String result = "00";
 		String message ="";
 		try{ 
 			if(Tools.checkKey("XDT", pd.getString("FKEY"))){	//检验请求key值是否合法
 				if(Tools.notEmpty("ID")){	//检查参数
					pd=sfjlService.findXDTById(pd);
					map.put("pd", pd);
 					result="01";
 					message = ResultMessageUtil.MESSAGE_1;
 				}else {
 					result = "03";
 					message = ResultMessageUtil.MESSAGE_3;
 				}
 			}else{
 				result = "05";
 				message = ResultMessageUtil.MESSAGE_5;
 			}
 		}catch (Exception e){
 			logger.error(e.toString(), e);
 			message = ResultMessageUtil.MESSAGE_0;
 		}finally{
 			map.put("result", result);
 			map.put("message", message);
 			logAfter(logger);
 		}
 		return AppUtil.returnObject(new PageData(), map);
 	}
 	/**
     * app随访心电图记录新增
     * @return
     */
    
    @RequestMapping(value="/appXdtSave", method = RequestMethod.POST)
    @ResponseBody
    public Object appXdtSave(){
    	logBefore(logger, "app新增随访心电图记录");
    	Map<String,Object> map = new HashMap<String,Object>();
    	PageData pd = new PageData();
    	pd = this.getPageData();
    	String result = "00";
    	String message ="";
    	try{ 
    		if(Tools.checkKey("XDT", pd.getString("FKEY"))){	//检验请求key值是否合法
    			if(AppUtil.checkParam("appAddXDT", pd)){	//检查参数
    				if(sfjlService.findById(pd)!=null){
    					String json = pd.getString("JSON");
        	    		JSONObject jsonObject = JSONObject.fromObject(json);
        	    		JSONArray ecgi = JSONArray.fromObject((jsonObject.get("ecgi")));
        	    		JSONArray ecgii = JSONArray.fromObject((jsonObject.get("ecgii")));
        	    		JSONArray ecgiii = JSONArray.fromObject((jsonObject.get("ecgiii")));
        	    		JSONArray ecgavr = JSONArray.fromObject((jsonObject.get("ecgavr")));
        	    		JSONArray ecgavl = JSONArray.fromObject((jsonObject.get("ecgavl")));
        	    		JSONArray ecgavf = JSONArray.fromObject((jsonObject.get("ecgavf")));
        	    		JSONArray ecgv = JSONArray.fromObject((jsonObject.get("ecgv")));
        	    		if(null!=ecgi.toString()&&!"".equals(ecgi.toString())){
        	    			byte[] ECGI= ecgi.toString().getBytes();
        	    			pd.put("ECGI", ECGI);
        	    		}
        	    		if(null!=ecgii.toString()&&!"".equals(ecgii.toString())){
        	    			byte[] ECGII= ecgii.toString().getBytes();
        	    			pd.put("ECGII", ECGII);
        	    		}
        	    		if(null!=ecgiii.toString()&&!"".equals(ecgiii.toString())){
        	    			byte[] ECGIII= ecgiii.toString().getBytes();
        	    			pd.put("ECGIII", ECGIII);
        	    		}
        	    		if(null!=ecgavr.toString()&&!"".equals(ecgavr.toString())){
        	    			byte[] ECGAVR= ecgavr.toString().getBytes();
        	    			pd.put("ECGAVR", ECGAVR);
        	    		}
        	    		if(null!=ecgavl.toString()&&!"".equals(ecgavl.toString())){
        	    			byte[] ECGAVL= ecgavl.toString().getBytes();
        	    			pd.put("ECGAVL", ECGAVL);
        	    		}
        	    		if(null!=ecgavf.toString()&&!"".equals(ecgavf.toString())){
        	    			byte[] ECGAVF= ecgavf.toString().getBytes();
        	    			pd.put("ECGAVF", ECGAVF);
        	    		}
        	    		if(null!=ecgv.toString()&&!"".equals(ecgv.toString())){
        	    			byte[] ECGV= ecgv.toString().getBytes();
        	    			pd.put("ECGV", ECGV);
        	    		}
        	    		String GUID = this.get32UUID();
        	    		pd.put("GUID", GUID);
        	    		sfjlService.saveXdt(pd);
        	    		pd.put("CARDIOGRAM_ID", GUID);
        	    		sfjlService.edit(pd);
        	    		result="01";
        				message = ResultMessageUtil.MESSAGE_1;
    				}else{
    					result="04";
        				message = "随访记录ID不存在";
    				}
 	            }else {
 	               result = "03";
 	               message = ResultMessageUtil.MESSAGE_3;
 	            }
    		}else{
    			result = "05";
    			message = ResultMessageUtil.MESSAGE_5;
    		}
    	}catch (Exception e){
    		logger.error(e.toString(), e);
    		message = ResultMessageUtil.MESSAGE_0;
    	}finally{
    		map.put("result", result);
    		map.put("message", message);
    		logAfter(logger);
    	}
    	return AppUtil.returnObject(new PageData(), map);
    }
    
}
