package com.tbyf.controller.app.appuser;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.tbyf.controller.base.BaseController;
import com.tbyf.entity.enums.EnumAttachmentType;
import com.tbyf.service.gp.mobilecode.impl.MobileCodeService;
import com.tbyf.service.system.appuser.AppuserManager;
import com.tbyf.service.system.attachment.AttachmentManager;
import com.tbyf.util.AppUtil;
import com.tbyf.util.DateUtil;
import com.tbyf.util.FileSizeFormatUtil;
import com.tbyf.util.FileUpload;
import com.tbyf.util.MD5;
import com.tbyf.util.PageData;
import com.tbyf.util.ResultMessageUtil;
import com.tbyf.util.StringUtil;
import com.tbyf.util.Tools;


/**
  * 会员-接口类 
  * 相关参数协议：
  * 00	请求失败
  * 01	请求成功
  * 02	返回空值
  * 03	请求协议参数不完整    
  * 04  用户名或密码错误
  * 05  FKEY验证失败
 */
@Controller
@RequestMapping(value="/appuser")
public class IntAppuserController extends BaseController {
    
	@Resource(name="appuserService")
	private AppuserManager appuserService;
	@Resource(name="mobileCodeService")
	private MobileCodeService mobileCodeService;
	@Value("${system.photo.realDir}")
	String attachmentRealDir;
	@Value("${tomcat.photo.virtualDir}")
	String attachmentVirtualDir;
	@Resource(name="attachmentService")
	private AttachmentManager attachmentService;
	//上传文件类型
	private Integer YSTX= EnumAttachmentType.YSTX.getCode();
	
	/**根据用户名获取会员信息
	 * @return
	 */
	@RequestMapping(value="/getAppuserByUm")
	@ResponseBody
	public Object getAppuserByUsernmae(){
		logBefore(logger, "根据用户名获取会员信息");
		Map<String,Object> map = new HashMap<String,Object>();
		PageData pd = new PageData();
		pd = this.getPageData();
		String result = "00";
		try{
			if(Tools.checkKey("USERNAME", pd.getString("FKEY"))){	//检验请求key值是否合法
				if(AppUtil.checkParam("getAppuserByUsernmae", pd)){	//检查参数
					pd = appuserService.findByUsername(pd);
					map.put("pd", pd);
					result = (null==pd) ?  "02" :  "01";
				}else {
					result = "03";
				}
			}else{
				result = "05";
			}
		}catch (Exception e){
			logger.error(e.toString(), e);
		}finally{
			map.put("result", result);
			logAfter(logger);
		}
		return AppUtil.returnObject(new PageData(), map);
	}
	
	/**用户名登录接口
	 * @return
	 */
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	@ResponseBody
	public Object appUserLogin(){
		logBefore(logger, "通过用户名、密码、手机序列号和用户类型登录APP");
		Map<String,Object> map = new HashMap<String,Object>();
		PageData pd = new PageData();
		pd = this.getPageData();
		String result = "00";
		String message ="";
		try{
			if(Tools.checkKey("USERNAME", pd.getString("FKEY"))){	//检验请求key值是否合法
				if(AppUtil.checkParam("login", pd)){	//检查参数
					String USERNAME = pd.getString("USERNAME");
					String PASSWORD = pd.getString("PASSWD");
					if(Tools.isEmpty(USERNAME)||Tools.isEmpty(PASSWORD)){
						result = "02";
			            message ="用户名或密码错误不能为空";
					}else{
						pd.put("PASSWORD", MD5.md5(PASSWORD));
						pd = appuserService.findByUiLoginInfo(pd);
						map.put("pd", pd);
						if(pd.size()==0){
							result ="04";
							message="密码错误";
						}else{
							result ="01";
							message=ResultMessageUtil.MESSAGE_1;
						}
					}
				}else {
					result = "03";
		            message =ResultMessageUtil.MESSAGE_3;
				}
			}else{
				result = "05";
	            message =ResultMessageUtil.MESSAGE_5;
			}
		}catch (Exception e){
			logger.error(e.toString(), e);
		}finally{
			map.put("result", result);
			map.put("message", message);
			logAfter(logger);
		}
		return AppUtil.returnObject(new PageData(), map);
	}
	/**
	 * 修改密码
	 */
	@RequestMapping(value = "/editPW", method = {RequestMethod.GET,RequestMethod.POST})
	@ResponseBody
	public Object editPW(){
		logBefore(logger, "修改APPUSER密码");
		Map<String,Object> map = new HashMap<String,Object>();
		PageData pd = new PageData();
		pd = this.getPageData();
		String result = "00";
		String message ="";
		try{
			if(Tools.checkKey("USER_ID", pd.getString("FKEY"))){	
			
				if(AppUtil.checkParam("editAppUserPW", pd)){	//检查参数
					String USER_ID = pd.getString("USER_ID");
					String PASSWORD = pd.getString("PASSWORD");
					String PASSWORD_NEW = pd.getString("PASSWORD_NEW");
					if(Tools.isEmpty(USER_ID)||Tools.isEmpty(PASSWORD)||Tools.isEmpty(PASSWORD_NEW)){
						result = "02";
			            message ="用户id或密码错误不能为空";
					}else{
						
						pd.put("USER_ID", USER_ID);
						pd.put("PASSWORD", MD5.md5(PASSWORD));
						PageData oldpd=appuserService.findByUserId(pd);
						if(oldpd!=null){
							if(PASSWORD.equals(PASSWORD_NEW)){
								result = "06";
					            message ="新密码不能与旧密码一致";
							}else{
								pd.put("USER_ID", oldpd.get("USER_ID"));
								pd.put("PASSWORD", MD5.md5(PASSWORD_NEW));
								appuserService.editPW(pd);
								result = "01";
								message=ResultMessageUtil.MESSAGE_1;
							}
						}else{
							result = "04";
				            message ="未查到会员";
						}
					} 
				} 
				else {
					result = "03";
					message=ResultMessageUtil.MESSAGE_3;
				}
			}else{
				result = "05";
				message=ResultMessageUtil.MESSAGE_5;
			}
		}catch (Exception e){
			message=ResultMessageUtil.MESSAGE_0;
			logger.error(e.toString(), e);
		}finally{
			map.put("result", result);
			map.put("message", message);
			logAfter(logger);
		}
		return AppUtil.returnObject(new PageData(), map);
	}
	/**
	 * 修改医生信息
	 */
	@RequestMapping(value = "/editUserInfo", method = RequestMethod.POST)
	@ResponseBody
	public Object editUser(){
		logBefore(logger, "修改APPUSER医生信息");
		Map<String,Object> map = new HashMap<String,Object>();
		PageData pd = new PageData();
		pd = this.getPageData();
		String result = "00";
		String message ="";
		try{
			if(Tools.checkKey("USER_ID", pd.getString("FKEY"))){	
				if(!Tools.isEmpty(pd.getString("USER_ID"))){
					PageData pd2 = new PageData();
					pd2=appuserService.findById(pd);
					if(pd2!=null){
						pd.put("ID", pd2.getString("BUSINESS_ID"));
						appuserService.editUserInfo(pd);
						result = "01";
						message=ResultMessageUtil.MESSAGE_1;
					}
				}else{
					result = "03";
					message=ResultMessageUtil.MESSAGE_3;
				}
			}else{
				result = "05";
				message=ResultMessageUtil.MESSAGE_5;
			}
		}catch (Exception e){
			message=ResultMessageUtil.MESSAGE_0;
			logger.error(e.toString(), e);
		}finally{
			map.put("result", result);
			map.put("message", message);
			logAfter(logger);
		}
		return AppUtil.returnObject(new PageData(), map);
	}
	/**
	 * 根据手机号码修改
	 */
	@RequestMapping(value = "/editPhonePW", method = {RequestMethod.GET,RequestMethod.POST})
	@ResponseBody
	public Object editPhonePW(){
		logBefore(logger, "修改APPUSER密码");
		Map<String,Object> map = new HashMap<String,Object>();
		PageData pd = new PageData();
		pd = this.getPageData();
		String result = "00";
		String message ="";
		try{
			if(Tools.checkKey("PHONE", pd.getString("FKEY"))){	
				if(AppUtil.checkParam("findAppUserPW", pd)){
					//验证码校验
	    			pd.put("SYSTIME", DateUtil.getTime());
	    			pd.put("TELEPHONE", pd.get("PHONE"));
	    			PageData obj =mobileCodeService.findMobileCodeBy300Time(pd);
					if(obj!=null && obj.get("CODE").equals(pd.get("MOBILECODE"))){
						//找回密码
						String PHONE = pd.getString("PHONE");
						String PASSWORD_NEW = pd.getString("PASSWORD_NEW");
						if(Tools.isEmpty(PHONE)|| Tools.isEmpty(PASSWORD_NEW)){
							result = "02";
				            message ="密码不能为空";
						}else{
							PageData oldpd=appuserService.findByPhone(pd);
							if(oldpd!=null){
								pd.put("USER_ID", oldpd.get("USER_ID"));
							    pd.put("PASSWORD", MD5.md5(PASSWORD_NEW));
								appuserService.editPW(pd);
								result = "01";
								message=ResultMessageUtil.MESSAGE_1;
							}else{
								result = "04";
					            message ="未查到会员";
							}
						}
					 }else{
		    				result = "06";
		        			message ="验证码错误，或已失效";
		    		 }
				}
				else {
					result = "03";
					message=ResultMessageUtil.MESSAGE_3;
				}
    			
			}else{
				result = "05";
				message=ResultMessageUtil.MESSAGE_5;
			}
		}catch (Exception e){
			message=ResultMessageUtil.MESSAGE_0;
			logger.error(e.toString(), e);
		}finally{
			map.put("result", result);
			map.put("message", message);
			logAfter(logger);
		}
		return AppUtil.returnObject(new PageData(), map);
	}
	/**
	 * 查询用户列表
	 * @return
	 */
	@RequestMapping(value="/getUserList",method=RequestMethod.GET)
	@ResponseBody
	public Object getFhsmsList(){
		 logBefore(logger, "查询用户列表");
		  Map<String,Object> map = new HashMap<String,Object>();
	        PageData pd = new PageData();
	        pd = this.getPageData();
	        String result = "00";
	        String message="";
	        try{	
	        	if(Tools.checkKey("KEYWORDS", pd.getString("FKEY"))){	//检验请求key值是否合法
		    		int pageSize=1;//页码
	        		int pageCount=10;//页数
	               	if(null !=pd.get("PAGESIZE") && null !=pd.get("PAGECOUNT") ){
	               		pd.put("pageStart", (Integer.parseInt(pd.get("PAGESIZE").toString())-1)*Integer.parseInt(pd.get("PAGECOUNT").toString())+1);
	               		pd.put("pageEnd", Integer.parseInt(pd.get("PAGESIZE").toString()) * Integer.parseInt(pd.get("PAGECOUNT").toString()));
	               	}else{
	               		pd.put("pageStart", (pageSize-1)* pageCount+1);
	               		pd.put("pageEnd", pageSize * pageCount);
	               	}
	               	 
               		List<PageData>	varList = appuserService.userListForApp(pd);
		        	map.put("pd", varList);
		            result = "01";
		            message =ResultMessageUtil.MESSAGE_1;
	                
	        	}else{
	        		result = "05";
			        message =ResultMessageUtil.MESSAGE_5;
	        	}
	        }catch (Exception e){
			    message =ResultMessageUtil.MESSAGE_0;
	            logger.error(e.toString(), e);
	        }finally{
	            map.put("result", result);
	            map.put("message", message);
	            logAfter(logger);
	        }
	        return AppUtil.returnObject(new PageData(), map);
	} 
	
	@RequestMapping(value = "/uploadImage")
	@ResponseBody
	public Object upFile(MultipartHttpServletRequest request,
			@RequestParam(value = "FILE", required = false) MultipartFile file)
			throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		String result ="00";
		String message ="";
		try {
			if(Tools.checkKey("FILE", request.getParameter("FKEY"))){	//检验请求key值是否合法  
				//文件上传路径，保存到服务器项目下。
				if(file.getSize() !=0 ){
					if(!file.isEmpty()){
						String uuid = this.get32UUID();
						String realName = FileUpload.fileUp(file, attachmentRealDir, uuid );
						String attachmentVirtualPath = attachmentVirtualDir + realName;
	
						PageData attachmentPd = new PageData();
						attachmentPd.put("ATTACHMENT_ID", uuid);	//主键
						attachmentPd.put("BUSINESS_ID", "");
						attachmentPd.put("TYPE", YSTX);
						attachmentPd.put("NAME", file.getOriginalFilename());
						attachmentPd.put("PATH", attachmentVirtualPath);
						attachmentPd.put("SIZE", FileSizeFormatUtil.formatFileSize(file.getSize()));
						attachmentPd.put("CONTENTTYPE", file.getContentType());
						attachmentPd.put("OPERATER",request.getParameter("PERSON_ID"));	//上传人
						attachmentPd.put("OPERATEDATE", Tools.date2Str(new Date()));	//上传时间
						attachmentService.save(attachmentPd);
						PageData pd = new PageData();
						pd.put("FILE_ID", uuid);
						pd.put("FILE_URL", attachmentVirtualPath);
						map.put("pd", pd);
						PageData imgPd = new PageData();
						String s=request.getParameter("USER_ID");
						int USER_ID=Integer.parseInt(s);
						imgPd.put("USER_ID", USER_ID);
						imgPd.put("IMAGE_ID", uuid);
						imgPd.put("IMAGE_URL", attachmentVirtualPath);
						appuserService.editUserImage(imgPd);
						result="01";
						message = ResultMessageUtil.MESSAGE_1;
					}else{
						result="00";
						message = ResultMessageUtil.MESSAGE_0;
					}
				} else { 
					result="00";
					message = ResultMessageUtil.MESSAGE_0;
				}
			}else{
				 result = "05";
					message = ResultMessageUtil.MESSAGE_5;
			}
		} catch (Exception e) {
			logger.error(e.toString(), e);
			message = ResultMessageUtil.MESSAGE_0;
		} finally {
			map.put("result", result);
			map.put("message", message);
			logAfter(logger);
		}
		return AppUtil.returnObject(new PageData(), map);
	}
	 
}
	
 